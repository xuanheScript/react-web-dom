'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (ast, stylesheets, options) {
  (0, _recast.visit)(ast, {
    visitCallExpression: function visitCallExpression(path) {
      var node = path.node;
      var parent = path.parentPath.node;

      if (!isStyleSheetCreate(node.callee)) {
        return this.traverse(path);
      }

      (0, _assert2.default)(n.VariableDeclarator.check(parent), 'return value of StyleSheet.create(...) must be assigned to a variable');

      var sheetId = parent.id.name;
      var expr = node.arguments[0];

      (0, _assert2.default)(expr, 'StyleSheet.create(...) call is missing an argument');

      var obj = (0, _transformObjectExpressionIntoStyleSheetObject2.default)(expr, options.context);
      var sheet = (0, _transformStyleSheetObjectIntoSpecification2.default)(obj);

      stylesheets[sheetId] = sheet;

      var gcnOptions = (0, _objectAssign2.default)({}, options);
      gcnOptions.prefixes = [options.filename, sheetId];

      var properties = [];

      Object.keys(sheet).forEach(function (styleId) {
        var className = (0, _generateClassName2.default)(styleId, gcnOptions);
        var key = b.identifier(styleId);
        var value = b.literal(className);
        var property = b.property('init', key, value);

        properties.push(property);
      });

      path.replace(b.objectExpression(properties));

      return false;
    },
    visitImportDeclaration: function visitImportDeclaration(path) {
      if (path.node.source.value === 'react-inline') {
        path.prune();
        return false;
      }

      this.traverse(path);
    },
    visitVariableDeclarator: function visitVariableDeclarator(path) {
      if (isRequireReactInline(path.node)) {
        path.prune();
        return false;
      }

      this.traverse(path);
    }
  });
};

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _recast = require('recast');

var _transformObjectExpressionIntoStyleSheetObject = require('./transformObjectExpressionIntoStyleSheetObject');

var _transformObjectExpressionIntoStyleSheetObject2 = _interopRequireDefault(_transformObjectExpressionIntoStyleSheetObject);

var _transformStyleSheetObjectIntoSpecification = require('./transformStyleSheetObjectIntoSpecification');

var _transformStyleSheetObjectIntoSpecification2 = _interopRequireDefault(_transformStyleSheetObjectIntoSpecification);

var _generateClassName = require('./generateClassName');

var _generateClassName2 = _interopRequireDefault(_generateClassName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var n = _recast.types.namedTypes;
var b = _recast.types.builders;

function isStyleSheetCreate(node) {
  return n.MemberExpression.check(node) && n.Identifier.check(node.object) && node.object.name === 'StyleSheet' && (n.Identifier.check(node.property) && node.property.name === 'create' || n.Literal.check(node.property) && node.property.value === 'create');
}

function isRequireReactInline(node) {
  return n.Identifier.check(node.id) && node.id.name === 'StyleSheet' && n.CallExpression.check(node.init) && n.Identifier.check(node.init.callee) && node.init.callee.name === 'require' && n.Literal.check(node.init.arguments[0]) && node.init.arguments[0].value === 'react-inline';
}
